# -*- coding: utf-8 -*-
"""Iris_Flower_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QIoWOzFxcfpJnehVftveo3t44vTaGZbD

#**IRIS FLOWER CLASSIFICATION**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/IRIS.csv")
df.head()

df.columns

df.info()

# the number of samples for each species
df["species"].value_counts()

#To convert class labels into numerical form
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['species']=le.fit_transform(df['species'])
df["species"]

# Plot the three varieties of iris flowers
# Sepal length vs Petal length
sns.set_style("whitegrid")
sns.set_context("talk")
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x="sepal_length", y="petal_length", hue="species",
                palette="viridis", s=100, alpha=0.7, edgecolor="k")
plt.title("Iris Flower Classification", fontsize=16)
plt.xlabel("Sepal Length (cm)", fontsize=12)
plt.ylabel("Petal Length (cm)", fontsize=12)
plt.legend(title="Species", fontsize=10)
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()

# Sepal width vs Petal width
sns.set_style("whitegrid")
sns.set_context("talk")
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x="sepal_width", y="petal_width", hue="species",
                palette="viridis", s=100, alpha=0.7, edgecolor="k")
plt.title("Iris Flower Classification", fontsize=16)
plt.xlabel("Sepal Width (cm)", fontsize=12)
plt.ylabel("Petal Width (cm)", fontsize=12)
plt.legend(title="Species", fontsize=10)
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()

# PairPlot
plt.close()
sns.set_style("darkgrid")
sns.pairplot(df,hue="species",size=3)
plt.show()

# Visulaization for each feature
df['sepal_length'].hist(color='red')

df['sepal_width'].hist(color='pink')

df['petal_length'].hist(color='skyblue')

df['petal_width'].hist(color='green')

df['sepal_length'].hist(color='red')
df['sepal_width'].hist(color='pink')
df['petal_length'].hist(color='skyblue')
df['petal_width'].hist(color='green')

# Visulaize relationships between features
species=[0,1,2]
color=['red','orange','blue']

#  relation between Sepal Length and Sepal Width
species = ["setosa", "versicolor", "virginica"]
palette = "viridis"
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x="sepal_length", y="sepal_width", hue="species",
                palette=palette, s=100, alpha=0.7, edgecolor="k",
                hue_order=species)
plt.title("Relationship Between Sepal Length and Sepal Width in Iris Flowers", fontsize=16)
plt.xlabel("Sepal Length (cm)", fontsize=12)
plt.ylabel("Sepal Width (cm)", fontsize=12)
plt.legend(title="Species", fontsize=10, loc="best")
plt.grid(True, linestyle='--', alpha=0.5)
sns.despine(trim=True, offset=10)
plt.show()

# Petal Length vs Petal Width
species = ["setosa", "versicolor", "virginica"]
palette = "viridis"
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x="petal_length", y="petal_width", hue="species",
                palette=palette, s=100, alpha=0.7, edgecolor="k",
                hue_order=species)
plt.title("Relationship Between Petal Length and Petal Width in Iris Flowers", fontsize=16)
plt.xlabel("Petal Length (cm)", fontsize=12)
plt.ylabel("Petal Width (cm)", fontsize=12)
plt.legend(title="Species", fontsize=10, loc="best")
plt.grid(True, linestyle='--', alpha=0.5)
sns.despine(trim=True, offset=10)
plt.show()

#  Petal Length vs Sepal Length
species = ["setosa", "versicolor", "virginica"]
# Define specific colors for each species
colors = ["red", "green", "blue"]
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x="petal_length", y="sepal_length", hue="species",
                palette=colors, s=100, alpha=0.7, edgecolor="k",
                hue_order=species)
plt.title("Relationship Between Petal Length and Sepal Width in Iris Flowers", fontsize=16)
plt.xlabel("Petal Length (cm)", fontsize=12)
plt.ylabel("Sepal Length (cm)", fontsize=12)
plt.legend(title="Species", fontsize=10, loc="best")
plt.grid(True, linestyle='--', alpha=0.5)
sns.despine(trim=True, offset=10)
plt.show()

#  Sepal Width vs Petal Width
species = ["setosa", "versicolor", "virginica"]
palette = "viridis"
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x="sepal_width", y="petal_width", hue="species",
                palette=palette, s=100, alpha=0.7, edgecolor="k",
                hue_order=species)
plt.title("Relationship Between Sepal Width and Petal Width in Iris Flowers", fontsize=16)
plt.xlabel("Sepal Width (cm)", fontsize=12)
plt.ylabel("Petal Width (cm)", fontsize=12)
plt.legend(title="Species", fontsize=10, loc="best")
plt.grid(True, linestyle='--', alpha=0.5)
sns.despine(trim=True, offset=10)
plt.show()

"""Correlation Matrix"""

# Calculate correlation after converting 'species' to numeric
corr = df.select_dtypes(include=np.number).corr()
fig, ax = plt.subplots(figsize=(5, 4))
sns.heatmap(corr, annot=True, ax=ax, cmap='Greens')

"""Training Model"""

#splitting the data into features X and target Y
X = df.drop('species',axis=1)
X

y = df["species"]
y

# Training and testing
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size =0.3,random_state=1)

# Logestic regression model
from sklearn.linear_model import LogisticRegression
LR=LogisticRegression()

LR.fit(X_train,y_train)

print("Accuracy(Logistic Regression): ",LR.score(X_test,y_test)*100)

# using  K-nearest model (KNN)
from sklearn.neighbors import KNeighborsClassifier
KNN=KNeighborsClassifier()
KNN.fit(X_train,y_train)
print("Accuracy (KNN): ",KNN.score(X_test,y_test)*100)

# using Decision Tree model
from sklearn.tree import DecisionTreeClassifier
DT=DecisionTreeClassifier()
DT.fit(X_train,y_train)
print("Accuracy (DecisionTree): ",DT.score(X_test,y_test)*100)

"""Confusion matrix"""

from sklearn.metrics import confusion_matrix

from sklearn.metrics import confusion_matrix

y_pred1=LR.predict(X_test)
y_pred2=KNN.predict(X_test)
y_pred3=DT.predict(X_test)

conf_matrix1 = confusion_matrix(y_test, y_pred1)
conf_matrix2 = confusion_matrix(y_test, y_pred2)
conf_matrix3 = confusion_matrix(y_test, y_pred3)
# y_pred1=LR.predict(X_test)
#y_pred2=KNN.predict(X_test)
#y_pred3=DT.predict(X_test)

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix1, annot=True, fmt='d', cmap='YlGnBu', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix of Logistic Regression')
plt.show()

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix2, annot=True, fmt='d', cmap='YlGnBu', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix of Logistic Regression')
plt.show()

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix3, annot=True, fmt='d', cmap='YlGnBu', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix of Logistic Regression')
plt.show()